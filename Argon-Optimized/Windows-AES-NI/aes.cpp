

#include <stdint.h>

#include "wmmintrin.h"
#if defined(_MSC_VER)
#include "intrin.h"
#else
#include <x86intrin.h>
#endif
#include "emmintrin.h"

#include "data.h"


unsigned char subkeys[11][16] = {
	{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, },
	{ 0xd6, 0xaa, 0x74, 0xfd, 0xd2, 0xaf, 0x72, 0xfa, 0xda, 0xa6, 0x78, 0xf1, 0xd6, 0xab, 0x76, 0xfe, },
	{ 0xb6, 0x92, 0xcf, 0x0b, 0x64, 0x3d, 0xbd, 0xf1, 0xbe, 0x9b, 0xc5, 0x00, 0x68, 0x30, 0xb3, 0xfe, },
	{ 0xb6, 0xff, 0x74, 0x4e, 0xd2, 0xc2, 0xc9, 0xbf, 0x6c, 0x59, 0x0c, 0xbf, 0x04, 0x69, 0xbf, 0x41, },
	{ 0x47, 0xf7, 0xf7, 0xbc, 0x95, 0x35, 0x3e, 0x03, 0xf9, 0x6c, 0x32, 0xbc, 0xfd, 0x05, 0x8d, 0xfd, },
	{ 0x3c, 0xaa, 0xa3, 0xe8, 0xa9, 0x9f, 0x9d, 0xeb, 0x50, 0xf3, 0xaf, 0x57, 0xad, 0xf6, 0x22, 0xaa, },
	{ 0x5e, 0x39, 0x0f, 0x7d, 0xf7, 0xa6, 0x92, 0x96, 0xa7, 0x55, 0x3d, 0xc1, 0x0a, 0xa3, 0x1f, 0x6b, },
	{ 0x14, 0xf9, 0x70, 0x1a, 0xe3, 0x5f, 0xe2, 0x8c, 0x44, 0x0a, 0xdf, 0x4d, 0x4e, 0xa9, 0xc0, 0x26, },
	{ 0x47, 0x43, 0x87, 0x35, 0xa4, 0x1c, 0x65, 0xb9, 0xe0, 0x16, 0xba, 0xf4, 0xae, 0xbf, 0x7a, 0xd2, },
	{ 0x54, 0x99, 0x32, 0xd1, 0xf0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xed, 0x9c, 0xbe, 0x2c, 0x97, 0x4e, },
	{ 0x13, 0x11, 0x1d, 0x7f, 0xe3, 0x94, 0x4a, 0x17, 0xf3, 0x07, 0xa7, 0x8b, 0x4d, 0x2b, 0x30, 0xc5, } };

uint64_t subkeys64[11][2] =
{ { 0x0706050403020100, 0x0f0e0d0c0b0a0908 },
{ 0xfa72afd2fd74aad6, 0xfe76abd6f178a6da },
{ 0xf1bd3d640bcf92b6, 0xfeb3306800c59bbe },
{ 0xbfc9c2d24e74ffb6, 0x41bf6904bf0c596c },
{ 0x033e3595bcf7f747, 0xfd8d05fdbc326cf9 },
{ 0xeb9d9fa9e8a3aa3c, 0xaa22f6ad57aff350 },
{ 0x9692a6f77d0f395e, 0x6b1fa30ac13d55a7 },
{ 0x8ce25fe31a70f914, 0x26c0a94e4ddf0a44 },
{ 0xb9651ca435874347, 0xd27abfaef4ba16e0 },
{ 0x685785f0d1329954, 0x4e972cbe9ced9310 },
{ 0x174a94e37f1d1113, 0xc5302b4d8ba707f3 } };



inline void AES_reduced_opt(int128 &u)
{
	//Round Key initialization
	__m128i roundkey[AES_ROUNDS + 1];

	for (unsigned i = 0; i<AES_ROUNDS + 1; ++i)
	{
		roundkey[i] = _mm_set_epi64x(subkeys64[i][1], subkeys64[i][0]);
	}

	__m128i acc0 = _mm_set_epi64x(u.i1, u.i0);

	acc0 = _mm_xor_si128(acc0, roundkey[0]);

	for (unsigned j = 0; j<AES_ROUNDS; ++j)
	{
		for (unsigned i = 0; i<1; ++i)
		{
			acc0 = _mm_aesenc_si128(acc0, roundkey[j + 1]);
		}
	}
	{
		u.i0 = _mm_extract_epi64(acc0, 0);
		u.i1 = _mm_extract_epi64(acc0, 1);
	}
}




//AES S-box
const static unsigned char sbox[256] = {
	//0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };



inline void AES_reduced_batch_intr(__m128i* batch, uint32_t batch_size) //Encrypts batch_size in parallel
{
	//Round Key initialization
	__m128i roundkey[AES_ROUNDS + 1];

	for (unsigned i = 0; i<AES_ROUNDS + 1; ++i)
	{
		roundkey[i] = _mm_set_epi64x(subkeys64[i][1], subkeys64[i][0]);
	}
	for (unsigned i = 0; i<batch_size; ++i)
	{
		batch[i] = _mm_xor_si128(batch[i], roundkey[0]);
	}

	for (unsigned j = 0; j<AES_ROUNDS; ++j)
	{
		for (unsigned i = 0; i<batch_size; ++i)
		{
			batch[i] = _mm_aesenc_si128(batch[i], roundkey[j + 1]);
		}
	}

}
